ðŸ”¹ What is the difference semantic and non-semantic tags
    - Semantic tags clearly define the meaning of their content in a way that is understandable both to developers and browsers. Examples include <header>, <footer>, <article>, and <section>. Non-semantic tags, like <div> and <span>, do not convey any specific meaning about their content and are used primarily for styling or grouping elements.

ðŸ”¹ JavaScript Callbacks Nedir?
    - Callback, baÅŸka bir fonksiyona parametre olarak geÃ§irilen bir fonksiyondur.
Yani:
"Ben iÅŸimi bitirdikten sonra bunu Ã§aÄŸÄ±r" demektir.
Bu, Ã¶zellikle senkron olmayan (asynchronous) iÅŸlemlerde Ã¶nemlidir, Ã§Ã¼nkÃ¼ bir iÅŸlem bittiÄŸinde sonrasÄ±nda yapÄ±lacak iÅŸ olarak baÅŸka bir fonksiyon Ã§aÄŸrÄ±lÄ±r.

ðŸ”¹ DOM (Document Object Model) Nedir?
HTML DOM, web sayfasÄ± yÃ¼klendiÄŸinde tarayÄ±cÄ± tarafÄ±ndan oluÅŸturulan nesne tabanlÄ± (object-based) bir aÄŸaÃ§ yapÄ±sÄ±dÄ±r.

 - document
 â””â”€â”€ html
     â”œâ”€â”€ head
     â”‚   â””â”€â”€ title
     â””â”€â”€ body
         â”œâ”€â”€ h1
         â””â”€â”€ p

1. Bir Ã¶ÄŸeye eriÅŸme:
 - let baslik = document.getElementById("baslik1");
2. Bir Ã¶ÄŸenin iÃ§eriÄŸini deÄŸiÅŸtirme:
 - baslik.innerHTML = "Yeni BaÅŸlÄ±k!";
3. Yeni bir Ã¶ÄŸe oluÅŸturma ve ekleme:
 - let yeniP = document.createElement("p");
    yeniP.textContent = "Yeni bir paragraf eklendi.";
    document.body.appendChild(yeniP);
4. Bir Ã¶ÄŸeyi silme:
    let silinecek = document.getElementById("paragraf1");
    silinecek.remove();

Her HTML Ã¶ÄŸesi, DOM'da bir nesne (object) olarak temsil edilir. Bu nesnenin:
Ã–zellikleri (properties) vardÄ±r â†’ deÄŸer tutar
YÃ¶ntemleri (methods) vardÄ±r â†’ iÅŸlem yapar

img.src = "yeniresim.jpg";         // Property â†’ resim kaynaÄŸÄ±nÄ± deÄŸiÅŸtirir
img.setAttribute("alt", "AÃ§Ä±klama"); // Method â†’ 'alt' attribute'u ekler

ðŸ”¹ BOM, tarayÄ±cÄ±larÄ±n JavaScript'e sunduÄŸu yapÄ±lar aracÄ±lÄ±ÄŸÄ±yla tarayÄ±cÄ±nÄ±n kendisini kontrol etmemizi saÄŸlayan bir modeldir.
 BOM, HTML belgesi dÄ±ÅŸÄ±ndaki her ÅŸeyle ilgilidir â€” yani:
TarayÄ±cÄ± penceresi
Sekme
URL
Gezinme geÃ§miÅŸi
ZamanlayÄ±cÄ±lar (setTimeout, setInterval)
Pencere aÃ§ma/kapama
Konum (location)
Ekran bilgileri


ðŸ”¹ Web API Nedir?
Web API (Web Application Programming Interface), genel olarak internet Ã¼zerinden baÅŸka bir uygulamayla (genellikle bir sunucuyla) iletiÅŸim kurmanÄ± saÄŸlayan arabirimdir.

ðŸ”¹ Browser API Nedir?
Browser API, tarayÄ±cÄ±nÄ±n kendisinin saÄŸladÄ±ÄŸÄ± ve JavaScript ile eriÅŸilebilen fonksiyonlardÄ±r. Bu API'ler, tarayÄ±cÄ±da Ã§alÄ±ÅŸan web uygulamalarÄ±nÄ±n donanÄ±ma veya tarayÄ±cÄ± Ã¶zelliklerine eriÅŸmesini saÄŸlar.
 - Geolocation API (konum verisi)


ðŸ”¹ AJAX Nedir?
Bir web sayfasÄ± yÃ¼klendikten sonra, web sunucusundan veri okumak iÃ§in kullanÄ±lÄ±r.

SayfayÄ± yenilemeden iÃ§eriÄŸi gÃ¼ncellemeye olanak saÄŸlar.

Arka planda web sunucusuna veri gÃ¶ndermeyi mÃ¼mkÃ¼n kÄ±lar.

ðŸ”¹ jQuery
jQuery, eski tarayÄ±cÄ± uyumsuzluklarÄ±nÄ± kolayca yÃ¶netmek iÃ§in geliÅŸtirilmiÅŸ bir kÃ¼tÃ¼phane iken, modern JavaScript (ES5 ve sonrasÄ±) Ã§oÄŸu jQuery iÅŸlevini native yÃ¶ntemlerle basit ve hÄ±zlÄ± ÅŸekilde yapmayÄ± saÄŸlar.
    -jQuery -> $("#myDiv").text("Merhaba DÃ¼nya!");
    -Vanilla JavaScript: -> document.getElementById("myDiv").textContent = "Merhaba DÃ¼nya!";
